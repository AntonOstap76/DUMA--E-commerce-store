import { computed, inject, Injectable, signal } from '@angular/core';
import { environment } from '../../../environments/environment';
import { HttpClient } from '@angular/common/http';
import { Cart, CartItem } from '../../shared/models/cart';
import { Product } from '../../shared/models/product';
import { findIndex, map } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class CartService {
  baseUrl = environment.apiUrl;
  private http = inject(HttpClient);

  // signal for cart
  cart=signal<Cart | null> (null);
  itemCount = computed(()=>{
    return this.cart()?.items.reduce((sum, item)=> sum+item.quantity, 0)
  });
  totals=computed(()=>{
    const cart = this.cart();
    if (!cart) return null;
    const subtotal = cart.items.reduce((sum, item)=>sum+item.price*item.quantity, 0);
    const shipping =0;
    const discount = 0 ;
    return{
      subtotal, 
      shipping,
      discount,
      total:subtotal+shipping-discount
    }
  });

  //methods for get and set a cart

  getCart(id:string){
    return this.http.get<Cart>(this.baseUrl+'cart?id='+id).pipe(
      // map- transform observables
      map(cart=>{
        this.cart.set(cart);
        return cart;
      })
    )
  }

  setCart(cart:Cart){
    return this.http.post<Cart>(this.baseUrl+'cart', cart).subscribe({
      next: cart=> this.cart.set(cart)
    })
  }

  addItemToCart(item: CartItem | Product, quantity=1 ){
    const cart = this.cart() ?? this.createCart();

    if ( this.isProduct(item)){
      // map product item to cart Item
      item=this.mapProductToCartItem(item);
    }
    // check if user add an item or updating quantity
    cart.items = this.addOrUpdateItem(cart.items, item, quantity);

    this.setCart(cart);

  }

  removeItemFromCart(productId:number, quantity=1){
    const cart = this.cart();
    if(!cart) return;

    // check if item in the basket already
    const index = cart.items.findIndex(x=>x.productId === productId);

    if(index != -1){
      if (cart.items[index].quantity>quantity){
        cart.items[index].quantity -= quantity;
      }
      // removing item from the basket
      else{
        cart.items.splice(index, 1);
      }
      //delete a cart if number of items in it 0
      if(cart.items.length === 0){
        this.deleteCart();
      }else{
        this.setCart(cart);
      }
    }
  }
  deleteCart() {
   this.http.delete(this.baseUrl+'cart?id='+this.cart()?.id).subscribe({
    next: ()=>{
      localStorage.removeItem('cart_id');
      this.cart.set(null);
    }
   })
  }

  private addOrUpdateItem(items: CartItem[], item: CartItem, quantity: number): CartItem[] {
    //check if item exist in items
    const index = items.findIndex(x => x.productId === item.productId);
    if(index==-1){
      item.quantity = quantity;
      items.push(item);
    }
    else{
      items[index].quantity += quantity;
    }
    return items

  }

  private mapProductToCartItem(item: Product): CartItem {
    return{
      productId: item.id,
      productName: item.name,
      price: item.price, 
      quantity:0,
      pictureUrl: item.pictureUrl,
      brand: item.brand,
      type: item.type
    }
  }

  // type guard
  private isProduct(item: CartItem | Product): item is Product{
    return (item as Product).id !== undefined;
  }



   private createCart(): Cart  {
    const cart = new Cart();

    // store cart id generated by nanoid in local storage
    localStorage.setItem('cart_id', cart.id);

    return cart;
  }
}
